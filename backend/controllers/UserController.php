<?php

namespace backend\controllers;

use backend\components\WsafAuth;
use common\libs\Helper;
use common\models\AuthRoleItem;
use common\models\BkUser as McBkUser;
use common\models\Enterprise;
use common\models\EnterpriseInfo;
use common\models\LoginForm;
use common\models\AuthAssignment;
use common\models\AuthItem;
use common\models\AuthRole;
use common\models\MatchFuncEnterpise;
use common\models\MatchFuncMp;
use common\models\Sports;
use backend\models\User;
use common\components\Wechat;
use common\models\model\BkUser;
use common\models\model\MatchFunc;
use common\models\MUserAddress;
use common\models\Tools;
use common\models\UserChannel;
use EasyWeChat\Factory;
use Yii;

use yii\data\ActiveDataProvider;
use yii\filters\auth\QueryParamAuth;
use yii\helpers\ArrayHelper;
use yii\web\HttpException;
use yii\web\ServerErrorHttpException;
use common\helpers\ResultDataHelper;
use common\helpers\Utils;
use common\models\model\SportsItemSub;

/**
 * Site controller
 */
class UserController extends BaseController
{

    public $modelClass = 'backend\models\User';
    public $createScenario = 'create';
    public $updateScenario = 'update';
    public $wxsdk;
    public $serializer = [
        'class' => 'yii\rest\Serializer',
        'collectionEnvelope' => 'list',
        'metaEnvelope' => 'page'
    ];


    public $except = ['login', 'logout', 'mp-login', 'wx-info', 'wsaf-login', 'wsaf-login-sports', 'hp-login', 'wsaf-login-sports2'];


    public function actions()
    {
        $actions = parent::actions();
        $actions['index'] =
            [
                'class' => 'backend\action\user\IndexAction',
                'modelClass' => $this->modelClass,
                'checkAccess' => [$this, 'checkAccess']
            ];
        $actions['info'] =
            [
                'class' => 'backend\action\user\InfoAction',
                'modelClass' => $this->modelClass,
                'checkAccess' => [$this, 'checkAccess']
            ];


        unset($actions['create']);
        unset($actions['delete']);
        return $actions;
    }


    public function init()
    {
//        $sysparams = \Yii::$app->params['appids'][11];
//        $appid = $sysparams['appid'];
//        $secret = $sysparams['secret'];
//        $token = 'aaas';
//        $config = [
//            'appId' => $appid,
//            'appSecret' => $secret,
//            'token' => $token
//        ];
//        $this->wxsdk = new Wechat($config);
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * 获取微信用户收据
     * @return mixed
     */
    public function actionWxInfo()
    {
        $code = Tools::getJsonParamErr('code');
        $data = $this->wxsdk->getOauth2AccessToken($code);
        if ($data) {
            $openId = $data['openid'];
            $oauth2AccessToken = $data['access_token'];
            $wxuser = $this->wxsdk->getSnsMemberInfo($openId, $oauth2AccessToken);
            return $wxuser;
        }
        // 返回数据验证失败
        return ResultDataHelper::api(422, "获取数据错误");
    }


    public function actionCreate()
    {
        /* @var $model \yii\db\ActiveRecord */
        $model = new $this->modelClass([
            'scenario' => $this->createScenario,
        ]);
        $params = Yii::$app->getRequest()->getBodyParams();
        $model->load($params, '');
        if ($model->save()) {
            //给其新增映射的channel
            $params['urid'] = $model->id;
            $params['unionid'] = 'unionid';
            $params['openid'] = (string)time();
            $params['token'] = Utils::makeToken();
            $channel_model = new UserChannel();
            $channel_model->load($params, '');
            if (!$channel_model->save()) {
                throw new ServerErrorHttpException(json_encode($channel_model->getErrors()));
            }
            $model->channel_id = $channel_model->id;
            if (!$model->save()) throw new ServerErrorHttpException(json_encode($model->getErrors()));
        } elseif (!$model->hasErrors()) {
            throw new ServerErrorHttpException('Failed to create the object for unknown reason.');
        } else {
            throw new ServerErrorHttpException(implode(',', $model->getErrorSummary(true)));
        }
        return $model;
    }

    public function actionEdit()
    {
//        $model = Yii::$app->user->identity;
        $model = new $this->modelClass([
            'scenario' => $this->updateScenario,
        ]);
        $params = Yii::$app->getRequest()->getBodyParams();
        $model->load($params, '');
//        $model->setScenario($this->updateScenario);
//        $model->load(Yii::$app->getRequest()->getBodyParams(), '');
        if ($model->save()) {
        } elseif (!$model->hasErrors()) {
            throw new ServerErrorHttpException('Failed to create the object for unknown reason.');
        } else {
            throw new ServerErrorHttpException(implode(',', $model->getErrorSummary(true)));
        }
        return $model;
    }


    //    public function fileds
    public function actionLogin()
    {
        $model = new LoginForm();
        $requestData = Yii::$app->request->bodyParams;
        $model->setAttributes($requestData);
        if ($model->login()) {
            $model = McBkUser::findByUsername($requestData['username']);
//            $user = new User();
//            $user = $user::findIdentityByAccessToken($model->auth_key);
            $roleIDs = (new AuthAssignment())->userRoleIDs($model->id);
            $roleNames = (new AuthRole())->roles($roleIDs);

//            $gid = $user->gid;
//            $sports = Sports::find()->select('id as sports_id, title')
//                ->andFilterWhere(['gid'=>$gid, 'status'=>1])
//                ->asArray()->all();
            $sports = [];
            //记录操作日志
            Helper::RecordOperationLog(['operation_id'=>$model->id,'operation_name'=>$model->username,'operation_model'=>'登录模块','operation_event'=>'用户后台登录']);
            return ['access_token' => $model->auth_key, 'roles' => $roleNames, 'sports' => $sports, 'channel_id' => $model->channel_id, 'area_code' => $model->area_code];
        } else {
            throw new ServerErrorHttpException("用户名或密码错误");
        }
    }


    //网页 微信授权登录
    public function actionMpLogin()
    {
        $config = Yii::$app->params['appidbks']['web'];

        $app = Factory::officialAccount($config);
        $user = $app->oauth->user();
        $origianl = $user->getOriginal();
        if (!empty($origianl['unionid'])) {
            //auth_key
            $model = $this->modelClass::findOne(['unionid' => $origianl['unionid'], 'status' => User::STATUS_ACTIVE]);
            if (!empty($model))
                return ['access_token' => $model->auth_key];
            else
                throw new HttpException(500, "登录失败,当前账号未绑定管理账号。请登录账号后在个人中心绑定");
        }
        throw new HttpException(500, "登录失败,请使用账号密码登录");
    }

    /**
     * WSAF授权登录
     */
    public function actionWsafLogin()
    {
        $params = Yii::$app->request->bodyParams;
        if (!empty($params['access_token'])) {
            $wsaf = new WsafAuth($params['access_token']);
            $userInfo = $wsaf->getUserInfo();
            if (!empty($userInfo)) {
                if (!empty($userInfo['userId'])) {
                    $model = BkUser::find()->andWhere(['wsaf_urid' => $userInfo['userId'], 'status' => User::STATUS_ACTIVE])->one();
                    if (empty($model)) {
                        $model = new BkUser();
                        $connection = Yii::$app->db;
                        $transaction = $connection->beginTransaction();
                        try {
                            $enterprise = new \common\models\model\Enterprise();
                            $enterprise->token = Yii::$app->security->generateRandomString();
                            $enterprise->name = $userInfo['displayName'];
                            $enterprise->imgurl = 'https://moveclub-file.oss-cn-hangzhou.aliyuncs.com/AAAtimg.jpeg';
                            //小B!!TODO
                            $enterprise->app = \common\models\Enterprise::DEFAULT_APP;
                            if (!$enterprise->save()) {
                                throw new ServerErrorHttpException(implode(",", $enterprise->getErrorSummary(true)));
                            } else {
                                $newToken = $this->encodeGid($enterprise->id);
                                $enterprise->updateAttributes(['token' => $newToken]);
                            }

                            $einfo = new EnterpriseInfo();
                            $einfo->logo = 'https://moveclub-file.oss-cn-hangzhou.aliyuncs.com/AAAWechatIMG1415.png';
                            $einfo->logo_thumb = 'https://moveclub-file.oss-cn-hangzhou.aliyuncs.com/AAAWechatIMG1415.png';
                            $einfo->gid = $enterprise->id;
                            $einfo->create_time = time();
                            $einfo->title = $enterprise->name;
                            $einfo->save();

                            $model->gid = $enterprise->id;
                            $model->nickname = $userInfo['displayName'];
                            $model->create_time = time();
                            $model->status = 1;
                            $model->role = '[1]'; //默认管理员
                            $model->username = $userInfo['name'];
                            $model->wsaf_urid = $userInfo['userId'];
                            $model->auth_key = $params['access_token'];
                            $model->avatar = 'https://moveclub-file.oss-cn-hangzhou.aliyuncs.com/AAAWechatIMG1415.png';
                            $model->password_hash = Yii::$app->security->generatePasswordHash($model->auth_key);
                            //企业权限
                            $commonen = new  \common\models\Enterprise();
                            $commonen->setRole($enterprise->id, true);
                            if (!$model->save()) {
                                throw new ServerErrorHttpException(implode(",", $model->getErrorSummary(true)));
                            }


                            $transaction->commit();
                        } catch (\Exception $e) {
                            $transaction->rollBack();
                            throw $e;
                        }
                    } else {
                        $model->auth_key = $params['access_token'];
                        if (!$model->save()) {
                            throw new ServerErrorHttpException(implode(",", $model->getErrorSummary(true)));
                        }
                    }


                    return ['access_token' => $model->auth_key];
                }
            }
        }
        throw new HttpException(500, "授权登录失败,请刷新页面后重试");
    }

    public function actionWsafLoginSports()
    {
        $params = Yii::$app->request->bodyParams;
        $gid = Yii::$app->params['WSAF_GID'];

        if (!empty($params['access_token'])) {
            $wsaf = new WsafAuth($params['access_token']);
            $userInfo = $wsaf->getUserInfo();

            if (!empty($userInfo)) {
                $userInfo['originName'] = $userInfo['name'];
                $userInfo['userId'] = sprintf('%s@%s', $userInfo['userId'], $gid);
                $userInfo['name'] = sprintf('%s@%s', $userInfo['name'], $gid);
                // Yii::error($userInfo);
                // 模拟数据
                // $userInfo['userId'] = 'smydh059' . time();
                // $userInfo['name'] = 'smydh059';
                if (!empty($userInfo['userId'])) {
                    $model = BkUser::find()->andWhere(['wsaf_urid' => $userInfo['userId'], 'status' => User::STATUS_ACTIVE])->one();

                    if (empty($model)) {
                        $accounts = $this->getWsafAccounts($userInfo['originName']);

                        // if (empty($accounts)) {
                        //     throw new HttpException(500, "未知用户");
                        // }

                        // $account = current($accounts);
                        $model = new BkUser();
                        $connection = Yii::$app->db;
                        $transaction = $connection->beginTransaction();
                        try {
                            $model->gid = $gid;
                            $model->nickname = $userInfo['displayName'];
                            $model->create_time = time();
                            $model->status = 1;
                            $model->role = '[]';
                            $model->username = $userInfo['name'];
                            $model->wsaf_urid = $userInfo['userId'];
                            $model->auth_key = Yii::$app->security->generateRandomString();
                            $model->avatar = 'https://moveclub-file.oss-cn-hangzhou.aliyuncs.com/AAAWechatIMG1415.png';
                            $model->password_hash = Yii::$app->security->generatePasswordHash($model->auth_key);
                            //企业权限
                            $commonen = new  \common\models\Enterprise();
                            $commonen->setRole($gid, true);
                            if (!$model->save()) {
                                throw new ServerErrorHttpException(implode(",", $model->getErrorSummary(true)));
                            }

                            // 初始化角色
                            $auth = Yii::$app->authManager;
                            $auth->assign($auth->getRole('Sports'), $model->id);

                            // 批量更新归属
                            if ($accounts) {
                                Yii::$app->db->createCommand()
                                    ->update(
                                        SportsItemSub::tableName(),
                                        ['userid' => $model->id],
                                        ['userid' => 0, 'id' => ArrayHelper::getColumn($accounts, 'id')]
                                    )
                                    ->execute();
                            }
                            $transaction->commit();
                        } catch (\Exception $e) {
                            $transaction->rollBack();
                            throw $e;
                        }
                    }

                    return [
                        'access_token' => $model->auth_key,
                        'userInfo' => $userInfo,
                        'gid' => $gid,
                    ];
                }
            }
        }

        throw new HttpException(500, "授权登录失败,请刷新页面后重试");
    }

    public function actionWsafLoginSports2()
    {
        $code = Tools::getJsonParam('code');
        $gid = Yii::$app->params['WSAF_GID'];
        if (!empty($code)) {
            $wsaf = new \backend\modules\wsaf\models\model\WsafAuth($code);
            $wsaf->code = $code;
            $userInfo = $wsaf->getUserInfo();
            if (isset($userInfo['status']) && $userInfo['status'] == "success") {
                $userInfo['userId'] = $userInfo['name'] = $userInfo['userName'] . '@' . $gid;
                $userInfo['displayName'] = $userInfo['companyName'] ? $userInfo['companyName'] : $userInfo['name'];
                $userInfo['auth_key'] = \Yii::$app->security->generateRandomString();
            }
            if (!empty($userInfo)) {
                $userInfo['originName'] = $userInfo['name'];
//                $userInfo['userId'] = sprintf('%s@%s', $userInfo['userId'], $gid);
//                $userInfo['name'] = sprintf('%s@%s', $userInfo['name'], $gid);
                // Yii::error($userInfo);
                // 模拟数据
                // $userInfo['userId'] = 'smydh059' . time();
                // $userInfo['name'] = 'smydh059';
                if (!empty($userInfo['userId'])) {
                    $model = BkUser::find()->andWhere(['status' => User::STATUS_ACTIVE])->andFilterWhere(['or', ['username' => $userInfo['userId']], ['wsaf_urid' => $userInfo['userId']]])->one();
                    if (empty($model)) {
                        $accounts = $this->getWsafAccounts($userInfo['originName']);

                        // if (empty($accounts)) {
                        //     throw new HttpException(500, "未知用户");
                        // }

                        // $account = current($accounts);
                        $model = new BkUser();
                        $connection = Yii::$app->db;
                        $transaction = $connection->beginTransaction();
                        try {
                            $model->gid = $gid;
                            $model->nickname = $userInfo['displayName'];
                            $model->create_time = time();
                            $model->status = 1;
                            $model->role = '[]';
                            $model->username = $userInfo['name'];
                            $model->wsaf_urid = $userInfo['userId'];
                            $model->auth_key = Yii::$app->security->generateRandomString();
                            $model->avatar = 'https://oss.mcloud.moveclub.cn/mpmsalpha/20210411/1618108291-60725f83c99e0.png';
                            $model->password_hash = Yii::$app->security->generatePasswordHash($model->auth_key);
                            //企业权限
                            $commonen = new  \common\models\Enterprise();
                            $commonen->setRole($gid, true);
                            if (!$model->save()) {
                                throw new ServerErrorHttpException(implode(",", $model->getErrorSummary(true)));
                            }


//                            //分配权限
//                            $authAss = new AuthAssignment();
//                            $authAss->bkurid = $model->id;
//                            $authAss->auth_id = 17;
//                            $authAss->type = 1;
//                            $authAss->status = 1;
//                            $authAss->create_time = time();
//                            $authAss->update_time = date('Y-m-d H:i:s');
//                            $authAss->save();

                            // 初始化角色
                            $auth = Yii::$app->authManager;
                            $auth->assign($auth->getRole('Sports'), $model->id);

                            // 批量更新归属
                            if ($accounts) {
                                Yii::$app->db->createCommand()
                                    ->update(
                                        SportsItemSub::tableName(),
                                        ['userid' => $model->id],
                                        ['userid' => 0, 'id' => ArrayHelper::getColumn($accounts, 'id')]
                                    )
                                    ->execute();
                            }

                            $transaction->commit();
                        } catch (\Exception $e) {
                            $transaction->rollBack();
                            throw $e;
                        }
                    } else {
                        if ($userInfo['displayName']) {
                            $model->nickname = $userInfo['displayName'];
                            if (!$model->save()) {
                                throw new ServerErrorHttpException(implode(",", $model->getErrorSummary(true)));
                            }
                        }
                    }
                    return [
                        'access_token' => $model->auth_key,
                        'userInfo' => $userInfo,
                        'gid' => $gid,
                    ];
                }
            }
        }

        throw new HttpException(500, "授权登录失败,请刷新页面后重试");
    }


    public function actionHpLogin()
    {
        $params = Yii::$app->request->bodyParams;

        $gid = Yii::$app->params['WLS_GID'];
        $auth = Yii::$app->authManager;

        if (!empty($params['access-token']) && !empty($params['memid'])) {

            $sql = sprintf("select * from  sf_api_access_token a
                    left join sf_member b on a.member_id = b.id
                    where  a.member_id = %d and a.access_token= '%s' and a.status=1 limit 1", $params['memid'], $params['access-token']);
            $result = Yii::$app->dbhp->createCommand($sql)->queryOne();
            if (!empty($result)) {
                $bkuser = BkUser::find()
                    ->andWhere([
                        'hp_urid' => $params['memid'],
                        'gid' => $gid
                    ])
                    ->limit(1)
                    ->one();

                if (empty($bkuser)) {


                    $bkuser = new BkUser();

                    $result['avatar'] = $result['head_portrait'];
                    $result['gid'] = $gid;
                    $result['hp_urid'] = $params['memid'];
                    $result['auth_key'] = Yii::$app->security->generateRandomString();
                    $result['password_hash'] = Yii::$app->security->generatePasswordHash($result['auth_key']);
                    $result['create_time'] = time();
                    $result['status'] = 1;
                    $result['role'] = json_encode([4]);
                    $bkuser->load($result, '');
                    $connection = Yii::$app->db;
                    $transaction = $connection->beginTransaction();
                    try {

                        if (!$bkuser->save()) {
                            throw new ServerErrorHttpException(implode(",", $bkuser->getErrorSummary(true)));
                        }
                        // 初始化角色
                        $auth = Yii::$app->authManager;
                        $auth->assign($auth->getRole('私有赛事管理'), $bkuser->id);
                        $transaction->commit();
                    } catch (\Exception $e) {
                        $transaction->rollBack();
                        throw new ServerErrorHttpException($e->getMessage());
                    }
                }
                return [
                    'access_token' => $bkuser->auth_key
                ];
            }
        }

        throw new HttpException(500, "授权登录失败,请刷新页面后重试");
    }

    protected function getWsafAccounts($user)
    {
        $sportsParams = array_merge(
            require Yii::getAlias("@sports") . '/config/params.php',
            require Yii::getAlias("@sports") . '/config/params-local.php'
        );

        $accounts = $sportsParams['accountitlemap'];
        return array_values(array_filter($accounts, function ($item) use ($user) {
            return $item['账号信息'] == $user;
        }));
    }

    public function actionBindMpInfo()
    {

        $user = Yii::$app->user->getIdentity();
        if (!empty($user->unionid)) {
            throw new HttpException(500, "请勿重复绑定");
        }

        $config = Yii::$app->params['appidbks']['web'];
        $app = Factory::officialAccount($config);
        $mp = $app->oauth->user();
        $origianl = $mp->getOriginal();
        if (!empty($origianl['unionid'])) {
            $user->unionid = $origianl['unionid'];
            $user->mpinfo = json_encode($origianl);
            if ($user->save())
                return $user;
            else {
                throw new HttpException(500, implode(',', $user->getErrorSummary(false)));
            }
        }
        throw new HttpException(500, '绑定失败');
    }


    public function actionUnbindMp()
    {

        $requestData = Yii::$app->request->bodyParams;
        $user = Yii::$app->user->identity;
        if (!$user->validatePassword($requestData['password'])) {
            throw new HttpException(500, "密码输入有误");
        }
        $user->unionid = '';
        $user->mpinfo = '';
        if ($user->save()) {
            return $user;
        }
        throw new HttpException(500, "解绑失败");
    }


    public function actionGetInfo()
    {
        $user = new User();
        $requestData = Yii::$app->request->bodyParams;
        $token = Tools::getJsonParamErr('token');

        $user = $user::findIdentityByAccessToken($token);
        $roleIDs = (new AuthAssignment())->userRoleIDs($user->id);
        $roleNames = (new AuthRole())->roleNames($roleIDs);

        $user = User::find()
            ->select([
                User::tableName() . ".id",
                User::tableName() . ".mpinfo",
                User::tableName() . ".phone",
                User::tableName() . ".role",
                User::tableName() . ".gid",
                User::tableName() . ".nickname",
                User::tableName() . ".avatar",
                User::tableName() . ".wsaf_urid"
            ])
            ->where(['auth_key' => $token]);

//        $user->joinWith(['enterpriseInfo' => function ($query) {
//            $tn = EnterpriseInfo::tableName();
//            $query->select([
//                $tn . ".intro",
//                $tn . ".logo",
//                $tn . ".logo_thumb",
//                $tn . ".title",
//                $tn . ".domain",
//            ]);
//        }]);
//        $user->joinWith(['enterprise' => function ($query) {
//            $tn = \common\models\model\Enterprise::tableName();
//            $query->select([
//                $tn . ".token",
//                $tn . ".name",
//                $tn . ".app",
//                $tn . ".imgurl"
//            ]);
//        }]);


        $userPermissions = Yii::$app->authManager->getPermissionsByUser(Yii::$app->user->id);
//        $func = MatchFunc::find()
//            ->select(['position', 'frouter'])
//            ->andWhere(['status' => 1, 'bkrule' => array_keys($userPermissions)])->asArray()->all();
        $func = [];
        $data = $user->asArray()->one();


        $key = Yii::$app->params['gidKey'];
        $ciphertext = Utils::ecbEncrypt($key, $data['gid']);
        // 删除一些包含敏感信息的字段
        $data['enterpriseInfo']['gidstr'] = $ciphertext;
        $data['roles'] = $roleNames;
        $aaData = AuthAssignment::findAll(['bkurid' => Yii::$app->user->id, 'status' => 1]);
        $actions = [];
        foreach ($aaData as $k => $v) {
            $ariData = AuthRoleItem::findAll(['role_id' => $v->auth_id, 'status' => 1]);
            foreach ($ariData as $kk => $vv) {
                if ($vv->actions) {
                    $at = json_decode($vv->actions, true);
                    if ($at)
                        $actions = array_merge($actions, $at);
                }
            }
        }
        $data['actions'] = array_values(array_unique($actions));
        //特殊gid处理
//        if($data['gid'] == 594)
//        {
//            $wsaf = new \backend\modules\wsaf\models\model\WsafAuth();
//            $menus = $wsaf->getMenus();
//            $data['topMenus'] = $menus;
//        }
        return $data + ['fun' => $func];
    }


    public function actionChangePassword()
    {
        $requestData = Yii::$app->request->bodyParams;
        $user = Yii::$app->user->identity;
        if (!$user->validatePassword($requestData['oldpassword'])) {
            throw new HttpException(500, "原始密码输入有误");
        }
        $user->setPassword($requestData['password']);
        $user->generateAuthKey();
        $user->generatePasswordResetToken();
        if ($user->save()) {
            return $user;
        } else {
            throw new HttpException(500, "修改失败,请稍后重试");
        }
    }

    /**
     * op:操作类型 0列表 1-编辑/新增
     * 用户地址列表
     */
    public function actionAddress()
    {
        $op = Tools::getJsonParam('op', 0);
        $page = Tools::getJsonParam('page', 1);
        $pagesize = Tools::getJsonParam('pagesize', 10);
        $urid = Yii::$app->user->id;
        $data = [];
        $out = ['state' => 0];
        switch ($op) {
            case 0:
                $query = MUserAddress::find()->where(['urid' => $urid, 'is_del' => 0])->orderBy('is_default desc,update_time desc');
                $dataProvider = new ActiveDataProvider([
                    'query' => $query,
                    "pagination" => ["pageSize" => $pagesize, "validatePage" => false],
                ]);
                $datas = $dataProvider->getModels();
                foreach ($datas as $k => $v) {
                    $d = MUserAddress::formatData($v);
                    $data[] = $d;
                }
                $out = ['total' => $dataProvider->getTotalCount(), 'page' => $page + 0];
                break;
            case 1: //新增、编辑
                $adid = Tools::getJsonParam('adid');
                $real_name = Tools::getJsonParamErr('real_name');
                $phone = Tools::getJsonParamErr('phone');
                $province = Tools::getJsonParamErr('province');
                $city = Tools::getJsonParamErr('city');
                $detail = Tools::getJsonParamErr('detail');
                $street = Tools::getJsonParam('street');
                $district = Tools::getJsonParam('district');
                $is_default = Tools::getJsonParam('is_default', 0);
                $post_code = Tools::getJsonParam('post_code');
                if ($adid) {
                    $model = MUserAddress::findOne($adid);
                } else {
                    $model = new MUserAddress();
                    $model->urid = $urid;
                    $model->add_time = time();
                }
                if ($model->urid != $urid) {
                    throw new HttpException(255, "非本人操作,请稍后重试");
                }
                $model->phone = $phone;
                $model->real_name = $real_name;
                $model->province = $province;
                $model->city = $city;
                $model->detail = $detail;
                $model->is_default = $is_default;
                $model->district = $district;
                $model->street = $street;
                $model->post_code = $post_code;
                if ($model->is_default > 0)
                    MUserAddress::updateAll(['is_default' => 0], ['urid' => $urid]);
                if (!$model->save()) {

                    throw new HttpException(500, implode(",", $model->getErrorSummary(true)));
                }
                $data = MUserAddress::formatData($model);
                $out = ['state' => 200, 'data' => $data, 'message' => '删除成功!'];
                break;
            case 2: //删除
                $adid = Tools::getJsonParamErr('adid');
                $model = MUserAddress::findOne($adid);
                if ($model)
                    $model->updateAttributes(['is_del' => 1]);
                $out = ['state' => 200, 'message' => '删除成功!'];
        }
        $out['data'] = $data ? $data : [];
        return $out;
    }
}
